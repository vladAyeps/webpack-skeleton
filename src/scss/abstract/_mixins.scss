// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

@mixin media($max-width){
  @media screen and (max-width: #{$max-width}px) {
    @content;
  }
}
@mixin pauseAnimation(){
  -webkit-animation-play-state: paused !important;
  animation-play-state: paused !important;
}

@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}


@mixin transition($transition...) {
  -moz-transition:    $transition;
  -o-transition:      $transition;
  -webkit-transition: $transition;
  transition:         $transition;
}
@mixin transition-property($property...) {
  -moz-transition-property:    $property;
  -o-transition-property:      $property;
  -webkit-transition-property: $property;
  transition-property:         $property;
}
@mixin transition-duration($duration...) {
  -moz-transition-property:    $duration;
  -o-transition-property:      $duration;
  -webkit-transition-property: $duration;
  transition-property:         $duration;
}
@mixin transition-timing-function($timing...) {
  -moz-transition-timing-function:    $timing;
  -o-transition-timing-function:      $timing;
  -webkit-transition-timing-function: $timing;
  transition-timing-function:         $timing;
}
@mixin transition-delay($delay...) {
  -moz-transition-delay:    $delay;
  -o-transition-delay:      $delay;
  -webkit-transition-delay: $delay;
  transition-delay:         $delay;
}
@mixin minMedia($min-width){
  @media screen and (min-width: #{$min-width}px) {
    @content;
  }
}

@mixin minMediaOrient($min-width, $orient) {
  @media screen and (min-width: #{$min-width}px) and (orientation: $orient){
    @content;
  }
}

@mixin dropShadow($horizontal, $vertical, $blur, $spread, $color){
  -webkit-box-shadow: #{$horizontal}px #{$vertical}px #{$blur}px #{$spread}px $color;
  -moz-box-shadow: #{$horizontal}px #{$vertical}px #{$blur}px #{$spread}px $color;
  box-shadow: #{$horizontal}px #{$vertical}px #{$blur}px #{$spread}px $color;
}

@mixin placeholderColor($color){
  ::-webkit-input-placeholder {color:$color;}
  ::-moz-placeholder          {color:$color;}/* Firefox 19+ */
  :-moz-placeholder           {color:$color;}/* Firefox 18- */
  :-ms-input-placeholder      {color:$color;}
}

@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-direction($direction)}: ($size * 1.5) solid $color;

  $perpendicular-borders: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}

@mixin absoluteCenter($direction: both) {
  position: absolute;
  @if $direction == vertical {
    top:50%;
    transform: translate(0,-50%);
  } @else if $direction == horizontal {
    left:50%;
    transform: translate(-50%,0);
  } @else {
    top:50%;
    left:50%;
    transform: translate(-50%,-50%);
  }
}

@mixin square($size: 1em) {
  width: $size;
  height: $size;
}

/**
  .class: (
    padding-top: 0,
    padding-bottom: 1rem,
    ...
  )
 */
 @mixin generate_regular_styles($styles) {
  @each $class_name, $style_names in $styles {
    #{$class_name} {
      @each $style_name, $style_value in $style_names {
        #{$style_name}: #{$style_value};
      }
    }
  }
}

@mixin generate_bp_styles($styles) {
  @each $bp, $val in $grid-breakpoints {
    @if $val != 0 {
      @media screen and (min-width: #{$val}) {
        @each $class_name, $style_names in $styles {
          #{$class_name}#{$media-classname-separator}#{$bp} {
            @each $style_name, $style_value in $style_names {
              #{$style_name}: #{$style_value};
            }
          }
        }
      }
    }
  }
}

/**
  $styles: (
    '.class': (
      padding-top: 0,
      padding-bottom: 1rem,
      ...
    )
  )
 */
@mixin generate_styles($styles) {
  @include generate_regular_styles($styles);
  @include generate_bp_styles($styles);
}

/**
  classname : {
    styles: ['','']
  }
 */
@mixin generate_rem_styles($styles, $loop: 20, $step: 0.25, $default: (), $negative: false) {
  $all_styles: map-merge((), $default);

  // positive loop
  @for $i from 0 through $loop {
    @each $class, $style_names in $styles {
      $temp_style: ();
      $temp_styles: ();

      @each $style in $style_names {
        $value: #{$step * $i}rem;
        $style_name: #{$style};
        $temp_styles: map-merge($temp_styles, ($style_name: $value ) );
      }
      $class_name: #{$class}-#{$i};
      $temp_style: map-merge($temp_style, ($class_name: $temp_styles) );
      $all_styles: map-merge($all_styles, $temp_style);
    }
  }

  @if $negative {
    // negative loop
    @for $i from 1 through $loop {
      @each $class, $style_names in $styles {
        $temp_style: ();
        $temp_styles: ();

        @each $style in $style_names {
          $value: #{$step * $i * -1}rem;
          $style_name: #{$style};
          $temp_styles: map-merge($temp_styles, ($style_name: $value ) );
        }
        $class_name: #{str-replace($class, '.', '.-')}-#{$i};
        $temp_style: map-merge($temp_style, ($class_name: $temp_styles) );
        $all_styles: map-merge($all_styles, $temp_style);
      }
    }
  }

  @include generate_styles($all_styles);

}